version: '3.8'

services:
  postgres_storage:
    container_name: ${STORAGE_POSTGRES_CONTAINER_NAME}
    image: postgres:latest
    networks:
      - msauth
    restart: always
    env_file: .env/container_config_common.env
    environment:
      - POSTGRES_USER=${STORAGE_POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${STORAGE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${STORAGE_POSTGRES_DATABASE}
      - REMOTE_DB_HOST=${AUTH_POSTGRES_CONTAINER_NAME}
      - REMOTE_DB_PORT=${AUTH_POSTGRES_PORT}
      - REMOTE_DB_DATABASE=${AUTH_POSTGRES_DATABASE}
      - REMOTE_DB_TABLENAME=${AUTH_REMOTE_TABLENAME}
      - REMOTE_DB_USERNAME=${AUTH_POSTGRES_USERNAME}
      - REMOTE_DB_PASSWORD=${AUTH_POSTGRES_PASSWORD}
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '${STORAGE_POSTGRES_PORT}:${STORAGE_POSTGRES_PORT}'
    volumes: 
      - ./storage/init/sql:/docker-entrypoint-initdb.d
    command: -p ${STORAGE_POSTGRES_PORT}

  postgres_config:
    container_name: ${CONFIG_POSTGRES_CONTAINER_NAME}
    image: postgres:latest
    networks:
      - msauth
    restart: always
    environment:
      - POSTGRES_USER=${CONFIG_POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${CONFIG_POSTGRES_PASSWORD}
      - POSTGRES_DB=${CONFIG_POSTGRES_DATABASE}
      - REMOTE_DB_HOST=${AUTH_POSTGRES_CONTAINER_NAME}
      - REMOTE_DB_PORT=${AUTH_POSTGRES_PORT}
      - REMOTE_DB_DATABASE=${AUTH_POSTGRES_DATABASE}
      - REMOTE_DB_TABLENAME=${AUTH_REMOTE_TABLENAME}
      - REMOTE_DB_USERNAME=${AUTH_POSTGRES_USERNAME}
      - REMOTE_DB_PASSWORD=${AUTH_POSTGRES_PASSWORD}
    env_file: .env/container_config_common.env
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '${CONFIG_POSTGRES_PORT}:${CONFIG_POSTGRES_PORT}'
    volumes: 
      - ./config/init/sql:/docker-entrypoint-initdb.d
    command: -p ${CONFIG_POSTGRES_PORT}

  storage:
    container_name: ${STORAGE_CONTAINER_NAME}
    depends_on:
      - postgres_storage
    env_file: .env/container_config_common.env
    networks:
      - msauth
    build: 
      context: ./storage/
    ports:
      - ${STORAGE_PORT}:${STORAGE_PORT}

    
  auth:
    container_name: ${AUTH_CONTAINER_NAME}
    image: openjdk:11-jre-slim
    build: 
      context: ./auth/
    env_file: .env/container_config_common.env
    environment:
      - SERVER_PORT=${AUTH_PORT}
      - JEDIS_HOSTNAME=${AUTH_REDIS_CONTAINER_NAME}
      - JEDIS_PORT=${AUTH_REDIS_PORT}
      - JEDIS_PASS=${AUTH_REDIS_PASSWORD}
      - JWT_ISSUER=${AUTH_JWT_ISSUER}
      - JEDIS_DATABASE=${AUTH_JEDIS_DATABASE}
      - DB_HOSTNAME=${AUTH_POSTGRES_CONTAINER_NAME}
      - DB_PORT=${AUTH_POSTGRES_PORT}
      - DB_DATABASE=${AUTH_POSTGRES_DATABASE}
      - DB_USER=${AUTH_POSTGRES_USERNAME}
      - DB_PASS=${AUTH_POSTGRES_PASSWORD}
    networks:
      - msauth
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}

  cache:
    container_name: ${CACHE_CONTAINER_NAME}
    networks:
      - msauth
    build: 
      context: ./cache/
    env_file: .env/container_config_common.env
    ports:
      - ${CACHE_PORT}:${CACHE_PORT}
    
  client:
    container_name: ${CLIENT_CONTAINER_NAME}
    networks:
      - msauth
    build: 
      context: ./client/
    env_file: .env/container_config_common.env
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}

  config:
    container_name: ${CONFIG_CONTAINER_NAME}
    depends_on:
      - postgres_config
    networks:
      - msauth
    build: 
      context: ./config/
    env_file: .env/container_config_common.env
    ports:
      - ${CONFIG_PORT}:${CONFIG_PORT}

  crawler:
    container_name: ${CRAWLER_CONTAINER_NAME}
    networks:
      - msauth
    restart: on-failure
    build: 
      context: ./crawler/
    env_file: .env/container_config_common.env
    ports:
      - ${CRAWLER_PORT}:${CRAWLER_PORT}

  # exporter:
  #   container_name: ${EXPORTER_CONTAINER_NAME}
  #   networks:
  #     - msauth
  #   build: ./exporter/core/exporter/
  #   env_file: .env/container_config_common.env
  #   ports:
  #     - ${EXPORTER_PORT}:${EXPORTER_PORT}


  notification:
    container_name: ${NOTIFICATION_CONTAINER_NAME}
    env_file: .env/container_config_common.env
    environment:
      - SERVER_PORT=${NOTIFICATION_PORT}
      - SESSION_HOST=${NOTIFICATION_SESSION_HOST}
      - SESSION_PASS=${NOTIFICATION_SESSION_PASSWORD}
      - SESSION_PORT=${NOTIFICATION_SESSION_PORT}
      - SESSION_USER=${NOTIFICATION_SESSION_USERNAME}
    build: 
      context: ./notification/
    networks:
      - msauth
    ports:
      - ${NOTIFICATION_PORT}:${NOTIFICATION_PORT}

  

  parser:
    container_name: ${PARSER_CONTAINER_NAME}
    depends_on:
      - storage
    env_file: .env/container_config_common.env
    networks:
      - msauth
    restart: on-failure
    build: 
      context: ./parser/
    ports:
      - ${PARSER_PORT}:${PARSER_PORT}

  # statistics:
  #   container_name: ${STATISTICS_CONTAINER_NAME}
  #   env_file: .env/container_config_common.env
  #   networks:
  #     - msauth
  #   build: ./statistics/core/statistics/
  #   ports:
  #     - ${STATISTICS_PORT}:${STATISTICS_PORT}

networks:
  msauth:
    external: true
    name: msauth